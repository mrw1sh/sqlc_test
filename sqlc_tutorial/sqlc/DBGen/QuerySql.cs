// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DBGen;
public class QuerySql
{
    public QuerySql()
    {
    }

    public QuerySql(string connectionString) : this()
    {
        this.ConnectionString = connectionString;
    }

    private QuerySql(SqliteTransaction transaction) : this()
    {
        this.Transaction = transaction;
    }

    public static QuerySql WithTransaction(SqliteTransaction transaction)
    {
        return new QuerySql(transaction);
    }

    private SqliteTransaction? Transaction { get; }
    private string? ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorRow(int Id, string Name, string? Bio);
    public readonly record struct GetAuthorArgs(int Id);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new SqliteCommand(GetAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@id", args.Id);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorRow
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@id", args.Id);
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetAuthorRow
                    {
                        Id = reader.GetInt32(0),
                        Name = reader.GetString(1),
                        Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                    };
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
    public readonly record struct ListAuthorsRow(int Id, string Name, string? Bio);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new SqliteCommand(ListAuthorsSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAuthorsRow>();
                        while (await reader.ReadAsync())
                            result.Add(new ListAuthorsRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = ListAuthorsSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<ListAuthorsRow>();
                while (await reader.ReadAsync())
                    result.Add(new ListAuthorsRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                return result;
            }
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors ( name, bio ) VALUES ( @name, @bio ) RETURNING id, name, bio";
    public readonly record struct CreateAuthorRow(int Id, string Name, string? Bio);
    public readonly record struct CreateAuthorArgs(string Name, string? Bio);
    public async Task<CreateAuthorRow?> CreateAuthor(CreateAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new SqliteCommand(CreateAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new CreateAuthorRow
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = CreateAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new CreateAuthorRow
                    {
                        Id = reader.GetInt32(0),
                        Name = reader.GetString(1),
                        Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                    };
                }
            }
        }

        return null;
    }

    private const string UpdateAuthorSql = "UPDATE authors set name = @name, bio = @bio WHERE id = @id";
    public readonly record struct UpdateAuthorArgs(string Name, string? Bio, int Id);
    public async Task UpdateAuthor(UpdateAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new SqliteCommand(UpdateAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@id", args.Id);
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = UpdateAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@id", args.Id);
            await command.ExecuteNonQueryAsync();
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE id = @id";
    public readonly record struct DeleteAuthorArgs(int Id);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new SqliteCommand(DeleteAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@id", args.Id);
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = DeleteAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@id", args.Id);
            await command.ExecuteNonQueryAsync();
        }
    }
}